# 1 "lexer.mll"
  (* header *)

open Lexing
open Parser

(* association list of keywords *)
let keyword_al = [
  ("dispose",DISPOSE);
  ("else",ELSE);
  ("emp",EMPTY);
  ("if",IF);
  ("local",LOCAL);
  ("new",NEW);
  ("resource",RESOURCE);
  ("then",THEN);
  ("when",WHEN);
  ("while",WHILE);
  ("with", WITH);
  ("dlseg",DLSEG);
  ("list" ,LIST);
  ("lseg",LISTSEG);
  ("tree" ,TREE);
  ("xlseg",XLSEG);
  ("true" ,TT);
  ("false",FF);
  ("NULL",NAT(0))]

(* To store the position of the beginning of a string and comment *)
let string_start_loc = ref Location.none;;
let comment_start_loc = ref [];;
let in_comment () = !comment_start_loc <> [];;

(* Update the current location with file name and line number. *)
let update_loc lexbuf line absolute chars =
  let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
      { pos with
          pos_lnum = if absolute then line else pos.pos_lnum + line;
          pos_bol = pos.pos_cnum - chars; }

(* Initialize file name and starting position *)
let init lexbuf file =
  Location.lexbuf := Some lexbuf;
  update_loc lexbuf 1 true 0;
  lexbuf.lex_curr_p <- { lexbuf.lex_curr_p with pos_fname = file; };
  lexbuf.lex_start_p <- lexbuf.lex_curr_p


# 51 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\227\255\228\255\078\000\160\000\235\000\232\255\233\255\
    \234\255\235\255\002\000\003\000\031\000\035\000\240\255\001\000\
    \243\255\244\255\245\255\246\255\074\000\248\255\249\255\250\255\
    \251\255\094\000\004\000\002\000\005\000\255\255\253\255\241\255\
    \075\000\252\255\247\255\242\255\238\255\237\255\236\255\245\000\
    \159\000\251\255\006\000\252\255\253\255\091\000\098\000\255\255\
    \254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\025\000\025\000\024\000\255\255\255\255\
    \255\255\255\255\019\000\019\000\028\000\016\000\255\255\028\000\
    \255\255\255\255\255\255\255\255\020\000\255\255\255\255\255\255\
    \255\255\028\000\021\000\001\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\000\
    \255\255\255\255\003\000\255\255\255\255\004\000\004\000\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \041\000\000\000\255\255\000\000\000\000\255\255\255\255\000\000\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\029\000\027\000\027\000\028\000\027\000\029\000\
    \043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\012\000\027\000\000\000\000\000\008\000\015\000\035\000\
    \021\000\017\000\007\000\009\000\024\000\020\000\030\000\026\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\014\000\016\000\011\000\013\000\010\000\038\000\
    \038\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\022\000\037\000\018\000\006\000\004\000\
    \036\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\023\000\025\000\019\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \034\000\033\000\048\000\032\000\047\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\043\000\000\000\000\000\042\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\045\000\000\000\000\000\000\000\000\000\046\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\031\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\000\000\000\000\000\000\000\000\039\000\
    \002\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \000\000\000\000\000\000\000\000\039\000\000\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\027\000\000\000\000\000\027\000\028\000\
    \042\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\027\000\255\255\255\255\000\000\000\000\015\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \020\000\032\000\045\000\025\000\046\000\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\040\000\255\255\255\255\040\000\003\000\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\040\000\255\255\255\255\255\255\255\255\040\000\255\255\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \255\255\255\255\255\255\255\255\039\000\255\255\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\040\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 63 "lexer.mll"
            ( update_loc lexbuf 1 false 0;
              token lexbuf )
# 227 "lexer.ml"

  | 1 ->
# 65 "lexer.mll"
           ( token lexbuf )
# 232 "lexer.ml"

  | 2 ->
# 66 "lexer.mll"
         ( comment_start_loc := [lexbuf.lex_curr_p];
           comment lexbuf;
           token lexbuf )
# 239 "lexer.ml"

  | 3 ->
# 69 "lexer.mll"
          ( POINTSTO )
# 244 "lexer.ml"

  | 4 ->
# 70 "lexer.mll"
         ( COMMA )
# 249 "lexer.ml"

  | 5 ->
# 71 "lexer.mll"
         ( LBRACE )
# 254 "lexer.ml"

  | 6 ->
# 72 "lexer.mll"
         ( LBRACKET )
# 259 "lexer.ml"

  | 7 ->
# 73 "lexer.mll"
         ( LPAREN )
# 264 "lexer.ml"

  | 8 ->
# 74 "lexer.mll"
         ( MINUSGREATER )
# 269 "lexer.ml"

  | 9 ->
# 75 "lexer.mll"
         ( RBRACE )
# 274 "lexer.ml"

  | 10 ->
# 76 "lexer.mll"
         ( RBRACKET )
# 279 "lexer.ml"

  | 11 ->
# 77 "lexer.mll"
         ( RPAREN )
# 284 "lexer.ml"

  | 12 ->
# 78 "lexer.mll"
         ( SEMI )
# 289 "lexer.ml"

  | 13 ->
# 79 "lexer.mll"
         ( AMPERAMPER )
# 294 "lexer.ml"

  | 14 ->
# 80 "lexer.mll"
         ( BARBAR )
# 299 "lexer.ml"

  | 15 ->
# 81 "lexer.mll"
         ( COLON )
# 304 "lexer.ml"

  | 16 ->
# 82 "lexer.mll"
         ( EQUAL )
# 309 "lexer.ml"

  | 17 ->
# 83 "lexer.mll"
         ( EQUALEQUAL )
# 314 "lexer.ml"

  | 18 ->
# 84 "lexer.mll"
         ( BANGEQUAL )
# 319 "lexer.ml"

  | 19 ->
# 85 "lexer.mll"
                            ( INFIXOP1(Lexing.lexeme lexbuf) )
# 324 "lexer.ml"

  | 20 ->
# 86 "lexer.mll"
                            ( INFIXOP2(Lexing.lexeme lexbuf) )
# 329 "lexer.ml"

  | 21 ->
# 87 "lexer.mll"
                            ( INFIXOP3(Lexing.lexeme lexbuf) )
# 334 "lexer.ml"

  | 22 ->
# 88 "lexer.mll"
            ( STAR )
# 339 "lexer.ml"

  | 23 ->
# 89 "lexer.mll"
            ( XOR )
# 344 "lexer.ml"

  | 24 ->
# 90 "lexer.mll"
        ( NAT(int_of_string(Lexing.lexeme lexbuf)) )
# 349 "lexer.ml"

  | 25 ->
# 91 "lexer.mll"
          ( let s = Lexing.lexeme lexbuf in
              try List.assoc s keyword_al
              with Not_found -> IDENT(s) )
# 356 "lexer.ml"

  | 26 ->
# 94 "lexer.mll"
           ( QIDENT(Lexing.lexeme lexbuf) )
# 361 "lexer.ml"

  | 27 ->
# 95 "lexer.mll"
        ( EOF )
# 366 "lexer.ml"

  | 28 ->
# 96 "lexer.mll"
      ( raise(Error.Illegal_character
                (Lexing.lexeme_char lexbuf 0,
                 Location.mkloc(lexbuf.lex_start_p) (lexbuf.lex_curr_p))) )
# 373 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 40
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 101 "lexer.mll"
         ( comment_start_loc := lexbuf.lex_curr_p :: !comment_start_loc;
           comment lexbuf; )
# 386 "lexer.ml"

  | 1 ->
# 103 "lexer.mll"
         ( match !comment_start_loc with
             | [] -> assert false
             | [x] -> comment_start_loc := [];
             | _ :: l -> comment_start_loc := l;
                 comment lexbuf; )
# 395 "lexer.ml"

  | 2 ->
# 108 "lexer.mll"
        ( match !comment_start_loc with
            | [] -> assert false
            | loc :: _ -> comment_start_loc := [];
                raise(Error.Unterminated_comment
                        (Location.mkloc loc (lexbuf.lex_curr_p))) )
# 404 "lexer.ml"

  | 3 ->
# 113 "lexer.mll"
            ( update_loc lexbuf 1 false 0;
              comment lexbuf )
# 410 "lexer.ml"

  | 4 ->
# 115 "lexer.mll"
      ( comment lexbuf )
# 415 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

# 117 "lexer.mll"
  (* trailer *)

# 425 "lexer.ml"
